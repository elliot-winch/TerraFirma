// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel IslandBase
#include "./Includes/Density.compute"
#include "./Includes/AddNoise.compute" 

float curvature;
float coneRadius;
float coneHeight;

float noiseInfluenceCurve; //reduce noise at the base to maintain cone shape

//0 is base, 1 is vertical
RWStructuredBuffer<NoiseParameters> noiseParameters;

float relativeYLevel(float y)
{
    return abs((y + boundsSize.y/2) / coneHeight);
}

float cone(float3 pos)
{
    float3 pos2D = float3(pos.x, 0, pos.z) + addNoise(pos, noiseParameters[0]);

    float curvatureValue = 1 - pow(relativeYLevel(pos.y), curvature);
    float radius = coneRadius * curvatureValue; //radius at given relative y position

    //Scale noise by distance from the center (where radius of limit varies by y position)
    return radius - length(pos2D);
}

[numthreads(numThreads,numThreads,numThreads)]
void IslandBase (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPoints.x || id.y >= numPoints.y || id.z >= numPoints.z) 
    {
        return;
    }    

    float3 pos = posFromCoord(id.x,id.y,id.z);
    float value = cone(pos);

    value -= addNoise(pos, noiseParameters[1]) * pow(relativeYLevel(pos.y), noiseInfluenceCurve);

    int index = indexFromCoord(id.x,id.y,id.z);
    points[index] = float4(pos, value); 
}
