// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel IslandBase
#include "./Includes/Density.compute"
#include "./Includes/AddNoise.compute"

float curvature;
float coneRadius;
float coneHeight;

float noiseInfluenceCurve; //reduce noise at the base to maintain cone shape

float relativeYLevel(float y)
{
    return max(0, (y + boundsSize.y/2) / (coneHeight));
}

float cone(float3 pos)
{
    float3 circleDistance = float3(pos.x, 0, pos.z);
    float cylinderValue = length(circleDistance) / coneRadius;

    float curvatureValue = 1 - pow(relativeYLevel(pos.y), curvature);

    return cylinderValue - curvatureValue;
}

[numthreads(numThreads,numThreads,numThreads)]
void IslandBase (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPoints.x || id.y >= numPoints.y || id.z >= numPoints.z) 
    {
        return;
    }    

    float3 pos = posFromCoord(id.x,id.y,id.z);
    float value = cone(pos);

    value += addNoise(pos) * pow(relativeYLevel(pos.y), noiseInfluenceCurve);

    int index = indexFromCoord(id.x,id.y,id.z);
    points[index] = float4(pos, -value);
}
