#pragma kernel March
#include "/Includes/MarchTables.compute"

static const int numThreads = 8;

struct Triangle {
    int vertexC;
    int vertexB;
    int vertexA;
};

//Input
int3 numPoints;
float isoLevel;
RWStructuredBuffer<float4> points;

//Output
RWStructuredBuffer<float4> vertices;
AppendStructuredBuffer<Triangle> triangles;


float4 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1 + t * (v2-v1);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPoints.y * numPoints.x + y * numPoints.x + x;
}

//x is 0, y is 1, z is 2
int edgeIndexFromCoord(int x, int y, int z, int direction)
{
    int index = indexFromCoord(x,y,z);

    if(direction > 0)
    {
        index += (numPoints.x - 1) * numPoints.y * numPoints.z;
    }

    if(direction > 1)
    {
        index += (numPoints.y - 1) * numPoints.z * numPoints.x;
    }

    return index;
}

[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPoints.x-1 || id.y >= numPoints.y-1 || id.z >= numPoints.z-1) {
        return;
    }

    int vertexIndices[12] = {
        edgeIndexFromCoord(id.x    , id.y    , id.z    , 0),
        edgeIndexFromCoord(id.x + 1, id.y    , id.z    , 2),
        edgeIndexFromCoord(id.x    , id.y    , id.z + 1, 0),
        edgeIndexFromCoord(id.x    , id.y    , id.z    , 2),

        edgeIndexFromCoord(id.x    , id.y + 1, id.z    , 0),
        edgeIndexFromCoord(id.x + 1, id.y + 1, id.z    , 2),
        edgeIndexFromCoord(id.x    , id.y + 1, id.z + 1, 0),
        edgeIndexFromCoord(id.x    , id.y + 1, id.z    , 2),

        edgeIndexFromCoord(id.x    , id.y    , id.z    , 1),
        edgeIndexFromCoord(id.x + 1, id.y    , id.z    , 1),
        edgeIndexFromCoord(id.x + 1, id.y    , id.z + 1, 1),
        edgeIndexFromCoord(id.x    , id.y    , id.z + 1, 1)
    };

    // 8 corners of the current cube
    float4 cornerValues[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cornerValues[0].w < isoLevel) cubeIndex |= 1;
    if (cornerValues[1].w < isoLevel) cubeIndex |= 2;
    if (cornerValues[2].w < isoLevel) cubeIndex |= 4;
    if (cornerValues[3].w < isoLevel) cubeIndex |= 8;
    if (cornerValues[4].w < isoLevel) cubeIndex |= 16;
    if (cornerValues[5].w < isoLevel) cubeIndex |= 32;
    if (cornerValues[6].w < isoLevel) cubeIndex |= 64;
    if (cornerValues[7].w < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {

        int localEdgeIndex0 = triangulation[cubeIndex][i];
        int localEdgeIndex1 = triangulation[cubeIndex][i + 1];
        int localEdgeIndex2 = triangulation[cubeIndex][i + 2];

        int globalVertexIndex0 = vertexIndices[localEdgeIndex0];
        int globalVertexIndex1 = vertexIndices[localEdgeIndex1];
        int globalVertexIndex2 = vertexIndices[localEdgeIndex2];

        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[localEdgeIndex0];
        int b0 = cornerIndexBFromEdge[localEdgeIndex0];

        int a1 = cornerIndexAFromEdge[localEdgeIndex1];
        int b1 = cornerIndexBFromEdge[localEdgeIndex1];

        int a2 = cornerIndexAFromEdge[localEdgeIndex2];
        int b2 = cornerIndexBFromEdge[localEdgeIndex2];

        vertices[globalVertexIndex0] = interpolateVerts(cornerValues[a0], cornerValues[b0]);
        vertices[globalVertexIndex1] = interpolateVerts(cornerValues[a1], cornerValues[b1]);
        vertices[globalVertexIndex2] = interpolateVerts(cornerValues[a2], cornerValues[b2]);

        Triangle tri;
        tri.vertexA = globalVertexIndex0;
        tri.vertexB = globalVertexIndex1;
        tri.vertexC = globalVertexIndex2;
        triangles.Append(tri);
    }
}
