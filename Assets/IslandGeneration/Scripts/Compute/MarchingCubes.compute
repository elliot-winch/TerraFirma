#pragma kernel March
#include "./Includes/MarchTables.compute"

static const int numThreads = 8;
static const int CUBE_EDGE_COUNT = 12;

struct Triangle 
{
    int a, b, c;
};

//Input
RWStructuredBuffer<float4> points;

//Output
RWStructuredBuffer<float4> vertices;
AppendStructuredBuffer<Triangle> triangles;

int numPointsPerAxis;
float isoLevel;

float4 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1 + t * (v2-v1);
}

int indexFromCoord(int x, int y, int z) 
{
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

//0 is x, 1 is y, 2 is z
int edgeIndex(int x, int y, int z, int direction)
{
    int index = indexFromCoord(x,y,z);

    return index + direction * (numPointsPerAxis * numPointsPerAxis * (numPointsPerAxis - 1));
}

[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPointsPerAxis-1 || id.y >= numPointsPerAxis-1 || id.z >= numPointsPerAxis-1) {
        return;
    }

    int edges[CUBE_EDGE_COUNT] = 
    {
        edgeIndex(id.x    , id.y    , id.z    , 0),
        edgeIndex(id.x + 1, id.y    , id.z    , 2),
        edgeIndex(id.x    , id.y    , id.z + 1, 0),
        edgeIndex(id.x    , id.y    , id.z    , 2),

        edgeIndex(id.x    , id.y + 1, id.z    , 0),
        edgeIndex(id.x + 1, id.y + 1, id.z    , 2),
        edgeIndex(id.x    , id.y + 1, id.z + 1, 0),
        edgeIndex(id.x    , id.y + 1, id.z    , 2),

        edgeIndex(id.x    , id.y    , id.z    , 1),
        edgeIndex(id.x + 1, id.y    , id.z    , 1),
        edgeIndex(id.x + 1, id.y    , id.z + 1, 1),
        edgeIndex(id.x    , id.y    , id.z + 1, 1)
    };
    
    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;



    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        
        int localEdgeIndex0 = triangulation[cubeIndex][i];
        int localEdgeIndex1 = triangulation[cubeIndex][i + 1];
        int localEdgeIndex2 = triangulation[cubeIndex][i + 2];
        
        int globalEdgeIndex0 = edges[localEdgeIndex0];
        int globalEdgeIndex1 = edges[localEdgeIndex1];
        int globalEdgeIndex2 = edges[localEdgeIndex2];

        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[localEdgeIndex0];
        int b0 = cornerIndexBFromEdge[localEdgeIndex0];

        int a1 = cornerIndexAFromEdge[localEdgeIndex1];
        int b1 = cornerIndexBFromEdge[localEdgeIndex1];

        int a2 = cornerIndexAFromEdge[localEdgeIndex2];
        int b2 = cornerIndexBFromEdge[localEdgeIndex2];  

        vertices[globalEdgeIndex0] = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        vertices[globalEdgeIndex1] = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        vertices[globalEdgeIndex2] = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);

        Triangle tri;
        tri.a = globalEdgeIndex0;
        tri.b = globalEdgeIndex1;
        tri.c = globalEdgeIndex2;

        triangles.Append(tri);
    } 
}
